
Description:  Create a set of resources that support the web application to run.

Parameters:
  EnvironmentName:
    Description: Please enter the environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

  Region:
    Description: Please enter the region in AWS that you want to use
    Type: String

  SubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet
    Type: String
  
  EC2InstanceType:
    Description: Please enter the instance type for the EC2 instance that you want to create
    Type: String
    AllowedValues: ["t2.micro", "m1.small"]

  EC2InstanceVolumeSize:
    Description: Please enter the instance volume size for the EC2 instance that you want to create
    Type: String

  EC2InstanceKey:
    Description: Please enter the key name for the EC2 instance that you want to create
    Type: String
  
  DBInstanceType:
    Description: Please enter the instance type for the database instance that you want to create
    Type: String
    Default: db.t3.micro

  DBInstanceVolumeSize:
    Description: Please enter the instance volume size for the RDS instance that you want to create
    Type: String
  
  DBPublicAccessibility:
    Description: Please enter the instance volume size for the RDS instance that you want to create
    Type: String
  
  DBEngine:
    Description: Please enter the database engine for the RDS instance that you want to create
    Type: String

  DBMultiAZ:
    Description: Please enter the acailability of multi aws zone for RDS instance that you want to create
    Type: String
  
  DBInstanceID:
    Description: Please enter the DB instance indentifier of RDS instance that you want to create
    Type: String
  
  DBName:
    Description: Please enter the DB name of RDS instance that you want to create
    Type: String
  
  DBUsername:
    Description: Please enter the master username for the database instance that you want to create
    Type: String
  
  DBPassword:
    Description: Please enter the master password for the database instance that you want to create
    Type: String
  
  AMIID:
    Description: Please enter the AMI Id for the EC2 instance that you want to create
    Type: String

  RoleName:
    Description: Please enter the Role Name that you want to create
    Type: String

  CodeDeployS3Bucket:
    Description: Please enter the S3 Bucket Name that you want to use for store Application Archive
    Type: String
    Default: codedeploy.xinyuzhang.me
  
  Domain:
    Description: Please enter the Domain that you want to use
    Type: String
    Default: xinyuzhang.me
  
  Certificate:
    Description: Please enter the Certificate that you want to use
    Type: String
    Default: arn:aws:acm:us-east-1:480616773130:certificate/7ee5327f-6165-429a-b75c-9ad9ebd06d58

Resources:
  LambdaDynamoSESS3SNSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Lambda-DynamoDB-SES-S3-SNS-Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource: !GetAtt DynamoDBEmailTable.Arn
          - Effect: Allow
            Action: 
              - ses:VerifyEmailAddress
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*
          - Effect: Allow
            Action: 
              - s3:GetObject
            Resource: [!Join ["", ["arn:aws:s3:::", !Ref CodeDeployS3Bucket]], !Join ["", ["arn:aws:s3:::", !Ref CodeDeployS3Bucket, "/*"]]]
          - Effect: Allow
            Action: 
              - sns:ConfirmSubscription
            Resource: !Ref SNSTopic
      Roles: 
        - !Ref LambdaServiceRole

  LambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: LambdaServiceRole

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          def handler(event, context):
            print("Hello World")
      FunctionName: email_service
      Handler: index.handler
      MemorySize: 256
      ReservedConcurrentExecutions: 5
      Role: !GetAtt LambdaServiceRole.Arn
      Runtime: python3.6
      Tags: 
        - Key: Name
          Value: SendEmailFunction
      Timeout: 60
  
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNSTopic

  DynamoDBEmailTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: emailId
          AttributeType: S
      KeySchema:
        - AttributeName: emailId
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: csye6225
      TimeToLiveSpecification: 
        AttributeName: expirationTime
        Enabled: true

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties: 
      DelaySeconds: 5
      KmsDataKeyReusePeriodSeconds: 43200
      MessageRetentionPeriod: 86400
      QueueName: MySQSQueue
      ReceiveMessageWaitTimeSeconds: 5
      VisibilityTimeout: 60

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: MySNSTopic
      Subscription: 
        - Endpoint: !GetAtt [LambdaFunction, Arn]
          Protocol: lambda
      TopicName: SendEmailOfBillsDue

  # Policies and Roles
  SQSAccess:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SQSAccess
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
            Resource: !GetAtt SQSQueue.Arn
      Roles: 
        - !Ref CodeDeployEC2ServiceRole
  
  SNSAccess:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SNSAccess
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - sns:Publish
              - sns:CreateTopic
            Resource: !Ref SNSTopic
      Roles: 
        - !Ref CodeDeployEC2ServiceRole

  CircleCIUploadLambdaFunction:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CircleCI-Upload-Lambda-Function
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - lambda:UpdateFunctionCode
              - lambda:UpdateFunctionConfiguration
            Resource: [!GetAtt LambdaFunction.Arn, !Join ["", [!GetAtt LambdaFunction.Arn, "/*"]]]
      Users:
        - circleci
  
  CodeDeployEC2S3:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeDeploy-EC2-S3
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
            Resource: [!Sub "arn:aws:s3:::${EncryptedS3Bucket}", !Sub "arn:aws:s3:::${EncryptedS3Bucket}/*"]
          - Effect: Allow
            Action: 
              - s3:GetObject
              - s3:ListBucket
            Resource: [!Join ["", ["arn:aws:s3:::", !Ref CodeDeployS3Bucket]], !Join ["", ["arn:aws:s3:::", !Ref CodeDeployS3Bucket, "/*"]]]
          - Effect: Allow
            Action: 
              - s3:GetObject
              - s3:ListBucket
            Resource: "*"
          - Effect: Allow
            Action: 
              - kms:*
            Resource: "*"
      Roles: 
        - !Ref CodeDeployEC2ServiceRole

  CircleCIUploadToS3:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CircleCI-Upload-To-S3
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Resource: [!Join ["", ["arn:aws:s3:::", !Ref CodeDeployS3Bucket]], !Join ["", ["arn:aws:s3:::", !Ref CodeDeployS3Bucket, "/*"]]]
      Users: 
        - circleci
  
  CircleCICodeDeploy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CircleCI-Code-Deploy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - codedeploy:RegisterApplicationRevision
              - codedeploy:GetApplicationRevision
            Resource: 
              - Fn::Join: [
                  "",
                  [
                    "arn:aws:codedeploy:",
                    !Ref "AWS::Region",
                    ":",
                    !Ref "AWS::AccountId",
                    ":application:",
                    !Ref CodeDeployApplication
                  ]
                ]
          - Effect: Allow
            Action: 
              - codedeploy:CreateDeployment
              - codedeploy:GetDeployment
            Resource: "*"
          - Effect: Allow
            Action: 
              - codedeploy:GetDeploymentConfig
            Resource: 
              - Fn::Join: [
                  "", 
                  [
                    "arn:aws:codedeploy:", 
                    !Ref "AWS::Region", 
                    ":",
                    !Ref "AWS::AccountId",
                    ":deploymentconfig:CodeDeployDefault.OneAtATime"
                  ]
                ]
              - Fn::Join: [
                  "",
                  [
                    "arn:aws:codedeploy:",
                    !Ref "AWS::Region",
                    ":",
                    !Ref "AWS::AccountId",
                    ":deploymentconfig:CodeDeployDefault.HalfAtATime"
                  ]
                ]
              - Fn::Join: [
                  "",
                  [
                    "arn:aws:codedeploy:",
                    !Ref "AWS::Region",
                    ":",
                    !Ref "AWS::AccountId",
                    ":deploymentconfig:CodeDeployDefault.AllAtOnce"
                  ]
                ]
      Users: 
        - circleci

  CircleciEC2AMI:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Circleci-EC2-AMI
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: [
              "ec2:AttachVolume",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CopyImage",
              "ec2:CreateImage",
              "ec2:CreateKeypair",
              "ec2:CreateSecurityGroup",
              "ec2:CreateSnapshot",
              "ec2:CreateTags",
              "ec2:CreateVolume",
              "ec2:DeleteKeyPair",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteSnapshot",
              "ec2:DeleteVolume",
              "ec2:DeregisterImage",
              "ec2:DescribeImageAttribute",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeRegions",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSubnets",
              "ec2:DescribeTags",
              "ec2:DescribeVolumes",
              "ec2:DetachVolume",
              "ec2:GetPasswordData",
              "ec2:ModifyImageAttribute",
              "ec2:ModifyInstanceAttribute",
              "ec2:ModifySnapshotAttribute",
              "ec2:RegisterImage",
              "ec2:RunInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances"
            ]
            Resource: "*"
      Users: 
        - circleci

  CodeDeployEC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployEC2ServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: CodeDeployEC2ServiceRole
  
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
                - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Tags:
        - Key: Name
          Value: CodeDeployServiceRole

  # CodeDeploy (CD)
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties: 
      ApplicationName: csye6225-webapp
      ComputePlatform: Server

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      AutoScalingGroups: 
        - !Ref WebServerAutoScalingGroup
      # Deployment:
      #   Description: Deploy on EC2 Instances
      #   IgnoreApplicationStopFailures: false
      #   Revision:
      #     RevisionType: S3
      #     S3Location:
      #       Bucket: !Ref CodeDeployS3Bucket
      #       Key: csye6225-webapp-*.zip
      #       BundleType: zip
      # DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: csye6225-webapp-deployment
      # DeploymentStyle:
      #   DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      #   DeploymentType: IN_PLACE
      Ec2TagFilters: 
        - Key: Label
          Value: codedeploy
          Type: KEY_AND_VALUE
      ServiceRoleArn: !GetAtt [CodeDeployServiceRole, Arn]

  EC2InstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: 
        - !Ref CodeDeployEC2ServiceRole

  # Security Groups
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: loadbalancer

  AppServersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 22
      VpcId: !Ref VPC
      # SecurityGroupIngress:
      #   - IpProtocol: tcp
      #     CidrIp: 0.0.0.0/0
      #     FromPort: 22
      #     ToPort: 22
      Tags:
        - Key: Name
          Value: application

  OutboundRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      Description: Permits Load Balancer to send traffics to App Server
      DestinationSecurityGroupId: !GetAtt [AppServersSecurityGroup, GroupId]
      FromPort: 8080
      GroupId: !GetAtt [LoadBalancerSecurityGroup, GroupId]
      IpProtocol: tcp
      ToPort: 8080

  InboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: Permits App Servers to accpet traffics from Load Balancer
      SourceSecurityGroupId: !GetAtt [LoadBalancerSecurityGroup, GroupId]
      FromPort: 8080
      GroupId: !GetAtt [AppServersSecurityGroup, GroupId]
      IpProtocol: tcp
      ToPort: 8080

  DBServersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 security group for all the RDS instances that will host web application
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref AppServersSecurityGroup
          FromPort: 3306
          ToPort: 3306
      Tags:
        - Key: Name
          Value: database

  EncryptedS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
        - Id: TransferToStandardIAIn30Days
          Prefix: “”
          Status: Enabled
          ExpirationInDays: 365
          Transitions:
            - TransitionInDays: 30
              StorageClass: STANDARD_IA

  # Auto-Scaling Group (Config, LoadBalancer, TargetGroup, DNS...)
  AutoScalingConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: DBInstance
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs: 
            VolumeType: gp2
            VolumeSize: !Ref EC2InstanceVolumeSize
            DeleteOnTermination: true
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref AMIID
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref EC2InstanceKey
      LaunchConfigurationName: asg_launch_config
      SecurityGroups: 
        - !Ref AppServersSecurityGroup
      UserData: 
        Fn::Base64: 
          Fn::Join: [
            "",
            [
              "#!/bin/bash -v \n",
              "set -e -x \n",
              # "sudo apt-get update -y \n",
              # "sudo apt-get upgrade -y \n",
              "sudo mkdir -p /var/mysql-certs/ \n",
              "cd /var/mysql-certs/ \n",
              "sudo curl -O https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem \n",
              "sudo mkdir /env \n",
              "sudo touch /env/properties \n",
              "echo PROFILE_NAME=AWS >> /env/properties \n",
              "echo RDS_MYSQL_DB_HOST=",!GetAtt DBInstance.Endpoint.Address," >> /env/properties \n",
              "echo RDS_MYSQL_DB_PORT=",!GetAtt DBInstance.Endpoint.Port," >> /env/properties \n",
              "echo RDS_MYSQL_DB_NAME=",!Ref DBName," >> /env/properties \n",
              "echo RDS_MYSQL_DB_USERNAME=",!Ref DBUsername," >> /env/properties \n",
              "echo RDS_MYSQL_DB_PASSWORD=",!Ref DBPassword," >> /env/properties \n",
              "echo AWS_REGION=",!Ref Region," >> /env/properties \n",
              "echo AWS_S3_BUCKET_NAME=",!Ref EncryptedS3Bucket," >> /env/properties \n",
              "echo AWS_S3_BUCKET_URL=",!GetAtt EncryptedS3Bucket.WebsiteURL," >> /env/properties \n",
              "echo AWS_S3_BUCKET_DOMAIN=",!GetAtt EncryptedS3Bucket.DomainName," >> /env/properties \n",
              "echo SQS_URL=",!Ref SQSQueue," >> /env/properties \n",
              "echo SNS_ARN=",!Ref SNSTopic," >> /env/properties \n",
              "echo SERVER_DOMAIN=",!Ref Domain," >> /env/properties \n",
              "echo JAVA_OPTS=","\\\"","-Dspring.profiles.active=prod -Dlogging.level.org.springframework=info -Dapp.profile.name=AWS",
              " -Dspring.datasource.url=jdbc:mysql://",!GetAtt DBInstance.Endpoint.Address,":",!GetAtt DBInstance.Endpoint.Port,"/",!Ref DBName,
              " -Dspring.datasource.username=",!Ref DBUsername," -Dspring.datasource.password=",!Ref DBPassword,
              " -Dspring.datasource.hikari.jdbc-url=jdbc:mysql://",!GetAtt DBInstance.Endpoint.Address,":",!GetAtt DBInstance.Endpoint.Port,"/",!Ref DBName,
              " -Dspring.datasource.hikari.username=",!Ref DBUsername," -Dspring.datasource.hikari.password=",!Ref DBPassword,
              " -Daws.region=",!Ref Region," -Daws.s3.bucket.name=",!Ref EncryptedS3Bucket,
              " -Daws.s3.bucket.url=",!GetAtt EncryptedS3Bucket.WebsiteURL," -Daws.s3.bucket.domain=",!GetAtt EncryptedS3Bucket.DomainName,
              " -Daws.sqs.url=",!Ref SQSQueue," -Daws.sns.arn=",!Ref SNSTopic," -Daws.server.domain=",!Ref Domain,
              "\\\""," >> /env/properties \n",
              "echo export $(grep -v '^#' /env/properties | xargs) >> /etc/profile \n",
              "sudo service tomcat8 restart \n"
            ]
          ]

  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: LoadBalancer
    Properties: 
      AutoScalingGroupName: WebServerAutoScalingGroup
      AvailabilityZones: 
        - !GetAtt [DBSubnet1, AvailabilityZone]
        - !GetAtt [DBSubnet2, AvailabilityZone]
      Cooldown: "600"
      DesiredCapacity: "2"
      LaunchConfigurationName: !Ref AutoScalingConfig
      MaxSize: "5"
      MinSize: "2"
      Tags: 
        - Key: Label
          Value: codedeploy
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier: 
        - !Ref DBSubnet1
        - !Ref DBSubnet2

  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: "300"
      ScalingAdjustment: "1"

  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: "300"
      ScalingAdjustment: "-1"

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmActions: 
        - !Ref WebServerScaleUpPolicy
      AlarmDescription: Scale-up if CPU > 10% for 1 minutes
      ComparisonOperator: GreaterThanThreshold
      Dimensions: 
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 50.0

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmActions: 
        - !Ref WebServerScaleDownPolicy
      AlarmDescription: Scale-down if CPU < 5% for 1 minutes
      ComparisonOperator: LessThanThreshold
      Dimensions: 
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 25.0
      
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: csye6225-webapp-load-balancer-1
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref DBSubnet1
        - !Ref DBSubnet2
      Tags:
        - Key: Label
          Value: codedeploy
      Type: application

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroup
          Type: forward      
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: "8080"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Matcher: 
        HttpCode: "401,200"
      Name: LoadBalancerTargetGroup
      Port: 8080
      Protocol: HTTP
      Tags:
        - Key: Label
          Value: codedeploy
      TargetGroupAttributes: 
        - Key: deregistration_delay.timeout_seconds
          Value: "600"
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "600"
      VpcId: !Ref VPC

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties: 
      AliasTarget: 
        DNSName: !GetAtt [LoadBalancer, DNSName]
        EvaluateTargetHealth: true
        HostedZoneId: !GetAtt [LoadBalancer, CanonicalHostedZoneID]
      Comment: DNS name for my instances.
      HostedZoneName: !Join ["", [!Ref Domain, "."]]
      Name: !Join ["", [!Ref Domain, "."]]
      Type: A

  # Database Server
  DBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBName: !Ref DBName
      EnablePerformanceInsights: true
      Engine: !Ref DBEngine
      EngineVersion: 8.0.17
      DBInstanceClass: !Ref DBInstanceType
      MultiAZ: !Ref DBMultiAZ
      DBInstanceIdentifier: !Ref DBInstanceID
      AllocatedStorage: !Ref DBInstanceVolumeSize
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: !Ref DBPublicAccessibility
      VPCSecurityGroups: 
        - !Ref DBServersSecurityGroup
      StorageEncrypted: true

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: The DBSubnetGroup for DB subnet
      DBSubnetGroupName: myDBSubnetGroup
      SubnetIds: 
        - !Ref DBSubnet1
        - !Ref DBSubnet2

  # Networking Part (VPC, Subnet, Route...)
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 
        Fn::Select: 
            - 0
            - Fn::GetAZs: !Sub
                - ${Domain}
                - { Domain: !Ref Region }
      CidrBlock: !Ref SubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public DB Subnet (AZ1)

  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 
        Fn::Select: 
            - 1
            - Fn::GetAZs: !Sub
                - ${Domain}
                - { Domain: !Ref Region }
      CidrBlock: 10.192.11.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public DB Subnet (AZ2)

  DBPublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DBPublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref DBPublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  DBSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBPublicRouteTable1
      SubnetId: !Ref DBSubnet1

  DBPublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DBPublicRoute2:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref DBPublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  DBSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBPublicRouteTable2
      SubnetId: !Ref DBSubnet2