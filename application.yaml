
Description:  Create a set of resources that support the web application to run.

Parameters:
  EnvironmentName:
    Description: Please enter the environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

  Region:
    Description: Please enter the region in AWS that you want to use
    Type: String

  SubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet
    Type: String
  
  EC2InstanceType:
    Description: Please enter the instance type for the EC2 instance that you want to create
    Type: String
    AllowedValues: ["t2.micro", "m1.small"]

  EC2InstanceVolumeSize:
    Description: Please enter the instance volume size for the EC2 instance that you want to create
    Type: String
  
  DBInstanceType:
    Description: Please enter the instance type for the database instance that you want to create
    Type: String
    Default: db.t3.micro

  DBInstanceVolumeSize:
    Description: Please enter the instance volume size for the RDS instance that you want to create
    Type: String
  
  DBPublicAccessibility:
    Description: Please enter the instance volume size for the RDS instance that you want to create
    Type: String
  
  DBEngine:
    Description: Please enter the database engine for the RDS instance that you want to create
    Type: String

  DBMultiAZ:
    Description: Please enter the acailability of multi aws zone for RDS instance that you want to create
    Type: String
  
  DBInstanceID:
    Description: Please enter the DB instance indentifier of RDS instance that you want to create
    Type: String
  
  DBName:
    Description: Please enter the DB name of RDS instance that you want to create
    Type: String
  
  DBUsername:
    Description: Please enter the master username for the database instance that you want to create
    Type: String
  
  DBPassword:
    Description: Please enter the master password for the database instance that you want to create
    Type: String
  
  AMIID:
    Description: Please enter the AMI Id for the EC2 instance that you want to create
    Type: String

  RoleName:
    Description: Please enter the Role Name that you want to create
    Type: String

  CodeDeployS3Bucket:
    Description: Please enter the S3 Bucket Name that you want to use for store Application Archive
    Type: String
    Default: arn:aws:s3:::codedeploy.xinyuzhang.me

Resources:
  CodeDeployEC2S3:
    Type: AWS::IAM::Policy
    Properties:
        PolicyName: CodeDeploy-EC2-S3
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
                - s3:ListBucket
              Resource: [!Sub "arn:aws:s3:::${EncryptedS3Bucket}", !Sub "arn:aws:s3:::${EncryptedS3Bucket}/*"]
            - Effect: Allow
              Action: 
                - s3:GetObject
                - s3:ListBucket
              Resource: !Ref CodeDeployS3Bucket
        Roles: 
          - !Ref CodeDeployEC2ServiceRole

  CircleCIUploadToS3:
    Type: AWS::IAM::Policy
    Properties:
        PolicyName: CircleCI-Upload-To-S3
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
              Resource: !Ref CodeDeployS3Bucket
        Users: 
          - circleci
  
  CircleCICodeDeploy:
    Type: AWS::IAM::Policy
    Properties:
        PolicyName: CircleCI-Code-Deploy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 
                - codedeploy:RegisterApplicationRevision
                - codedeploy:GetApplicationRevision
              Resource: 
                - Fn::Join: [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      !Ref "AWS::Region",
                      ":",
                      !Ref "AWS::AccountId",
                      ":application:",
                      !Ref CodeDeployApplication
                    ]
                  ]
            - Effect: Allow
              Action: 
                - codedeploy:CreateDeployment
                - codedeploy:GetDeployment
              Resource: "*"
            - Effect: Allow
              Action: 
                - codedeploy:GetDeploymentConfig
              Resource: 
                - Fn::Join: [
                    "", 
                    [
                      "arn:aws:codedeploy:", 
                      !Ref "AWS::Region", 
                      ":",
                      !Ref "AWS::AccountId",
                      ":deploymentconfig:CodeDeployDefault.OneAtATime"
                    ]
                  ]
                - Fn::Join: [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      !Ref "AWS::Region",
                      ":",
                      !Ref "AWS::AccountId",
                      ":deploymentconfig:CodeDeployDefault.HalfAtATime"
                    ]
                  ]
                - Fn::Join: [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      !Ref "AWS::Region",
                      ":",
                      !Ref "AWS::AccountId",
                      ":deploymentconfig:CodeDeployDefault.AllAtOnce"
                    ]
                  ]
        Users: 
          - circleci

  CircleciEC2AMI:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Circleci-EC2-AMI
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: [
              "ec2:AttachVolume",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CopyImage",
              "ec2:CreateImage",
              "ec2:CreateKeypair",
              "ec2:CreateSecurityGroup",
              "ec2:CreateSnapshot",
              "ec2:CreateTags",
              "ec2:CreateVolume",
              "ec2:DeleteKeyPair",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteSnapshot",
              "ec2:DeleteVolume",
              "ec2:DeregisterImage",
              "ec2:DescribeImageAttribute",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeRegions",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSubnets",
              "ec2:DescribeTags",
              "ec2:DescribeVolumes",
              "ec2:DetachVolume",
              "ec2:GetPasswordData",
              "ec2:ModifyImageAttribute",
              "ec2:ModifyInstanceAttribute",
              "ec2:ModifySnapshotAttribute",
              "ec2:RegisterImage",
              "ec2:RunInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances"
            ]
            Resource: "*"
      Users: 
        - circleci

  CodeDeployEC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployEC2ServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: Name
          Value: CodeDeployEC2ServiceRole
  
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
                # - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Tags:
        - Key: Name
          Value: CodeDeployServiceRole

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties: 
      ApplicationName: csye6225-webapp
      ComputePlatform: Server

  # CodeDeployDeploymentGroup:
  #   DependsOn: EC2Instance
  #   Type: AWS::CodeDeploy::DeploymentGroup
  #   Properties:
  #     ApplicationName: !Ref CodeDeployApplication
  #     # AutoRollbackConfiguration:
  #     #   Enabled: true
  #     #   Events:
  #     #     - DEPLOYMENT_FAILURE
  #     Deployment:
  #       Description: Deploy on EC2 Instances
  #       IgnoreApplicationStopFailures: false
  #       Revision:
  #         RevisionType: S3
  #         S3Location:
  #           Bucket: !Ref CodeDeployS3Bucket
  #           Key: csye6225-webapp-*
  #           BundleType: zip
  #     DeploymentGroupName: csye6225-webapp-deployment
  #     DeploymentConfigName: CodeDeployDefault.AllAtOnce
  #     DeploymentStyle:
  #       DeploymentOption: WITHOUT_TRAFFIC_CONTROL
  #       DeploymentType: IN_PLACE
  #     Ec2TagFilters: 
  #       - Key: Label
  #         Value: codedeploy
  #         Type: KEY_AND_VALUE
  #     OnPremisesInstanceTagFilters:
  #       - Key: Label
  #         Value: codedeploy
  #         Type: KEY_AND_VALUE
  #     ServiceRoleArn: !GetAtt [CodeDeployServiceRole, Arn]

  EC2InstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: 
        - !Ref CodeDeployEC2ServiceRole

  AppServersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 22/80/433/8080
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80  
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 433
          ToPort: 433
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 8080
          ToPort: 8080
      Tags:
        - Key: Name
          Value: application
 
  DBServersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 security group for all the RDS instances that will host web application
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref AppServersSecurityGroup
          FromPort: 3306
          ToPort: 3306
      Tags:
        - Key: Name
          Value: database

  EncryptedS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
        - Id: TransferToStandardIAIn30Days
          Prefix: “”
          Status: Enabled
          ExpirationInDays: 365
          Transitions:
            - TransitionInDays: 30
              StorageClass: STANDARD_IA

  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: DBInstance
    Properties:
      ImageId: !Ref AMIID
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds: 
        - !Ref AppServersSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs: 
            VolumeType: gp2
            VolumeSize: !Ref EC2InstanceVolumeSize
            DeleteOnTermination: true
      KeyName: KeyForSpringBoot
      SubnetId: !Ref DBSubnet1
      UserData: 
        Fn::Base64: 
          Fn::Join: [
            "",
            [
              "#!/bin/bash -v \n",
              "set -e -x \n",
              "sudo apt-get update -y \n",
              "sudo apt-get upgrade -y \n",
              "sudo mkdir /env \n",
              "sudo touch /env/properties \n",
              "echo PROFILE_NAME=AWS >> /env/properties \n",
              "echo RDS_MYSQL_DB_HOST=",!GetAtt DBInstance.Endpoint.Address," >> /env/properties \n",
              "echo RDS_MYSQL_DB_PORT=",!GetAtt DBInstance.Endpoint.Port," >> /env/properties \n",
              "echo RDS_MYSQL_DB_NAME=",!Ref DBName," >> /env/properties \n",
              "echo RDS_MYSQL_DB_USERNAME=",!Ref DBUsername," >> /env/properties \n",
              "echo RDS_MYSQL_DB_PASSWORD=",!Ref DBPassword," >> /env/properties \n",
              "echo AWS_REGION=",!Ref Region," >> /env/properties \n",
              "echo AWS_S3_BUCKET_NAME=",!Ref EncryptedS3Bucket," >> /env/properties \n",
              "echo AWS_S3_BUCKET_URL=",!GetAtt EncryptedS3Bucket.WebsiteURL," >> /env/properties \n",
              "echo AWS_S3_BUCKET_DOMAIN=",!GetAtt EncryptedS3Bucket.DomainName," >> /env/properties \n",
              "echo export $(grep -v '^#' /env/properties | xargs) >> /etc/profile \n",
              "sudo service tomcat8 restart \n"
            ]
          ]
      Tags:
        - Key: Label
          Value: codedeploy
              
  DBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBName: !Ref DBName
      Engine: !Ref DBEngine
      DBInstanceClass: !Ref DBInstanceType
      MultiAZ: !Ref DBMultiAZ
      DBInstanceIdentifier: !Ref DBInstanceID
      AllocatedStorage: !Ref DBInstanceVolumeSize
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: !Ref DBPublicAccessibility
      VPCSecurityGroups: 
        - !Ref DBServersSecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: The DBSubnetGroup for DB subnet
      DBSubnetGroupName: myDBSubnetGroup
      SubnetIds: 
        - !Ref DBSubnet1
        - !Ref DBSubnet2

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 
        Fn::Select: 
            - 0
            - Fn::GetAZs: !Sub
                - ${Domain}
                - { Domain: !Ref Region }
      CidrBlock: !Ref SubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public DB Subnet (AZ1)

  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 
        Fn::Select: 
            - 1
            - Fn::GetAZs: !Sub
                - ${Domain}
                - { Domain: !Ref Region }
      CidrBlock: 10.192.11.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public DB Subnet (AZ2)

  DBPublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DBPublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref DBPublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  DBSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBPublicRouteTable1
      SubnetId: !Ref DBSubnet1

  DBPublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DBPublicRoute2:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref DBPublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  DBSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBPublicRouteTable2
      SubnetId: !Ref DBSubnet2

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  DBSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref DBSubnet1
  
  DBSubnet2:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref DBSubnet2